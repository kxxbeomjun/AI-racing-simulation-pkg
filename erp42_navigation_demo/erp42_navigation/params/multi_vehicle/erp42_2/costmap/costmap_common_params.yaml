footprint: [[-0.49, -0.5775], [-0.49, 0.5775], [1.53, 0.5775], [1.53, -0.5775]]
footprint_padding: 0.01

transform_tolerance: 0.5
map_type: costmap

robot_base_frame: erp42_2/virtual_base_link
update_frequency: 20.0
publish_frequency: 20.0
resolution: 0.1

obstacle_layer:
  enabled:                  true
  cost_scaling_factor:  2.0    # exponential rate at which the obstacle cost drops off (4.0) 
  inflation_radius:     4.0 # max. distance from an obstacle at which costs are incurred for planning paths. (with TEB :1.0, with PurePursuit: 1.5)
  voxel_decay:              0.2   # seconds if linear, e^n if exponential
  decay_model:              0     # 0=linear, 1=exponential, -1=persistent
  voxel_size:               0.1   # meters
  track_unknown_space:      true  # default space is known
  unknown_threshold:        15    # voxel height
  mark_threshold:           0     # voxel height
  update_footprint_enabled: true
  combination_method:       1     # 1=max, 0=override
  origin_z:                 0.0   # meters
  publish_voxel_map:        false # default off
  transform_tolerance:      0.2   # seconds
  mapping_mode:             false # default off, saves map not for navigation
  map_save_duration:        60.0  # default 60s, how often to autosave
  observation_sources:      scan_mark scan_clear
  scan_mark: {
    data_type: PointCloud2, #LaserScan 
    topic: /points_filtered, #/scan_filtered
    marking: true,
    clearing: false,
    obstacle_range: 50.0,         # meters
    min_obstacle_height: -1.0,     # default 0, meters
    max_obstacle_height: 2.0,     # default 3, meters
    expected_update_rate: 0.0,    # default 0, if not updating at this rate at least, remove from buffer
    observation_persistence: 0.0, # default 0, use all measurements taken during now-value, 0=latest
    inf_is_valid: false,          # default false, for laser scans
    filter: "passthrough",        # default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommend on 
    voxel_min_points: 0,          # default 0, minimum points per voxel for voxel filter
    clear_after_reading: true}    # default false, clear the buffer after the layer gets readings from it
  scan_clear: {
    data_type: PointCloud2, #LaserScan 
    topic: /points_filtered, #/scan_filtered
    marking: false,
    clearing: true,
    max_z: 2.0,                  # default 0, meters
    min_z: -1.0,                  # default 10, meters
    vertical_fov_angle: 0.8745,  # default 0.7, radians
    horizontal_fov_angle: 1.048, # default 1.04, radians
    decay_acceleration: 1.0,     # default 0, 1/s^2. If laser scanner MUST be 0
    model_type: 1,               # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
    inf_is_valid: true}

inflation_layer_global:
  enabled:              true
  cost_scaling_factor:  1.0    # exponential rate at which the obstacle cost drops off (4.0) 
  inflation_radius:     2.5 # max. distance from an obstacle at which costs are incurred for planning paths. (with TEB :1.0, with PurePursuit: 1.5)

inflation_layer_local:
  enabled:              true
  cost_scaling_factor:  1.0    # exponential rate at which the obstacle cost drops off (4.0) 
  inflation_radius:     1.5 # max. distance from an obstacle at which costs are incurred for planning paths. (with TEB :1.0, with PurePursuit: 1.5)

static_layer:
  enabled:              true
  map_topic:            "/map"
  unknown cost value: 253
  lethal_cost_threshold: 50
  track_unknown_space: false

multibot_layer:
  enabled:                  true
  total_vehicle: 2

  # TODO
  
  # 선 작업 
  # spatio-temporal 빌드
  # velodyne_pointclouds 구동 테스트
  # regulated-purepursuit, erp42_obstacle_detection 최신본 빌드
  # 기존 세팅 구동 테스트

  # 후 작업
  # erp42_obs: virtual tf, clustering point euc dist 계산, flag pub
  # regulated-purepursuit: flag sub, isCollision() 추가